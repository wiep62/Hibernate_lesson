1. Нужно создать файл с настройками хибернета
2. в МАЙН настройить SessionFactory - 1 раз на всё приложение (он используется 1 раз он очень мноог весит и долго запускается. НЕЛЬЗЯ УКАЗЫВАТЬ ПОЛНЫЙ ПУТЬ)
3.  Открываем сессию (любое взаим. с БД происходит через сессию - открыл а потом закрыл)
Нельзя сессию держать открытой
4. Нужно создать сущность (User)
- при созд-ии сущности нужно указать ХИБЕНЕТУ что наш класс явл. сущностью (ЕНТИТИ) и указать таблицу ЮЗЕРС (можно и н указывать но тогда хибернейт будет использовать таблицу ЮЗЕР )
- создать геттеры и сеттеры и пустой конструктор (в ГИБЕРНЕТЕ сначала зап-ся сеттеры а потом пустой конструктор)
5. Созд. импорт СКЛ:
PRIMARY KEY - первичный ключ
id bigserial (инкрементируемый тип при сохранении увеличивается) - постгресовский тип данных как лонг и т.д.
6. достаем ЮЗЕРА:
     User user = session.get(User.class, 1);
7. создаем нового юзера:
User user = new User("Jon");
session.save(user);
id мы не указываем т.к. у нас по умолчанию в БД итерация
//получаем пользователя:
       session.getTransaction().begin();

        // 1. User user = session.get(User.class, 3);
    User user = new User("Jon");
    session.save(user);
         session.getTransaction().commit();
         session.close();

         //получаем пользователя
     session.getTransaction().begin();
               User user = session.get(User.class, 3L);
               System.out.println(user);
               session.getTransaction().commit();
               session.close();

  8. Персистенс контекст (типо коробочка):
  когда обр-ся к польз-лю 1 или 2 то он сохр-ся в "коробочке"
нам передается ссылка на этот объект который нах-сЯ в персистенс контекст
- ОБЪЕКТЫ С КОТОРЫМИ МЫ РАБОТАЕМ - КОПИИ ОРИГИНАЛА, кот. находится в персистенс контекст
-после изм-ния обект - хибернейт сравнивает, если не одинаковые то объект изменится

СЕШН ФЭКТОРИ - тяжелый объект:
-хибернет подг-ет все материалы для объекта и хранит их в эешн фэктори
-перед запуском приложения он подг. такие запросы под все объекты
Вывелся объект, не выполняли СЕЙВ но имя поменялось:
(когда мы меняем имя, выполняя коммит-транзакции - хибернейт автоматически подготавл. апдейт скрипт, который это имя меняет )
Для того чтобы работать с объектом (менять его), и чтобы он не менялся в БД нужно, нам необходимо отвязать объект
отконтекста постоянства ПЕРСИСТЕНСКОНТЕКСТА.
СОСТОЯНИЕ СУЩНОСТЕЙ:
-transient (не находится под упр-ем персистент контекста)
-managed (persistent) (когда достаем объекты из БД )
-detached (мы отвязали объект от постоянства)
-removed (есть перс.контексте, после выполнения уд-ся из БД)

   session.getTransaction().begin();
            User userOne = session.get(User.class, 3L);
            userOne.setName("Frank");
            session.getTransaction().commit();
            session.close();

            session = sessionFactory.getCurrentSession();
            session.getTransaction().begin();

            User user = session.get(User.class, 3L);

            session.save(user);
            session.getTransaction().commit();
            System.out.println(user);

РЕФЛЕКСИЯ !!!

 СВЯЗИ:
 1 к 1 (соединение с помощью внешнего ключа):
 имеется емплеес и он связан с ЕМПЛЕЕС_ДЕТАЛИС, они принадлежать только друнг другу

 jdbc место гибернейта (нужно много настроек)!
 для каждого работника свой АДРЕСС() и т.д.
- созд-ем сущность Employee в БД ее создать, потом в Employee указать первичный ключ @Table(name = "employees")
указываем 1-ый ключ :
@OneToOne
    @JoinColumn(name = "details_id") - есть в классе ЕМПАЙ
    private EmployeeDetails details;
не обяз-но указывать в employees_details того работника к которому мы мапимся , мы можем просто примапиться в поле ДЕТАЙЛС
, которые есть уже у нас в классе ЕМПЛАЙ
    ********************
если поменяем details на другое то     private EmployeeDetails details; //todo мапимся к полю
в классе ЕМПЛОЕДЕТАИЛЗ нужно поменять  @OneToOne(mappedBy = "details")
МЫ ПРИВЯЗЫВАЕМСЯ КОНКРЕТНО К ПОЛЮ.
мы ссылаемся 1 к одному и кроме аннотаций больше ничего не нужно)

мы не обращались к емплайДетайлз. Взяли работника , хибирнейт увидел свЯзь с аннотацией ЕМПЛАЙДЕТАИЛЗ (1 к 1)
и подтянул работника в момент когда мы его достали (вывел емаил, город и т.д.)
    session.getTransaction().begin();
            Employee userOne = session.get(Employee.class, 1L);
            System.out.println(userOne.getDetails());
            session.getTransaction().commit();
            session.close();

***************************************************************

-- m21  ---------------
к 1-му объекту может принадл, неск других. (УНИВЕР - ЕМУ ПРИНАДЛЕЖАТ СТУДЕНТЫ, ПРЕПОДЫ и т.д.)